package skymine.redenergy.core.database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import com.zaxxer.hikari.HikariDataSource;

import skymine.redenergy.core.logging.SkyMineLogger;

/**
 * Wrapper for JDBC driver
 * @author RedEnergy
 */
public class DatabaseConnector {
	
	
	/**
	 * Map, in which all cached connections pools are stored
	 */
	private Map<String, HikariDataSource> dbSources = new HashMap<String, HikariDataSource>();
	
	/**
	 * Initialize database connections and caches it in connectionList
	 * @return true if database has been successfully connected and false if connection failed
	 * @param url Host of database, example: <i>jdbc:mysql://localhost:3306/dbname</i>
	 * @param user Database login
	 * @param password Database password
	 * @param connectionTitle String identifier of connection
	 */
	public boolean initialiseDatabase(String url, String user, String password, String connectionTitle){
		HikariDataSource ds = new HikariDataSource();
		ds.setDriverClassName("com.mysql.jdbc.Driver");
		ds.setJdbcUrl(url);
		ds.addDataSourceProperty("characterEncoding", "utf8");
		ds.addDataSourceProperty("useUnicode","true");
		ds.setUsername(user);
		ds.setPassword(password);
		return this.dbSources.put(connectionTitle, ds) == null;
	}
	
	/**
	 * Executes SQL request for provided database connection
	 * @param connectionTitle String identifier of connection which would be used
	 * @param request SQL request
	 * @param args Arguments of SQL request 
	 * @return ResultSet with request response
	 * @throws SQLException 
	 * @throws IllegalArgumentException will be thrown if no connection for such <b>connectionTitle</b> has been initialized
	 */
	public void databaseRequest(String connectionTitle, String request, DatabaseConnectionHandler handler, Object ... args) throws SQLException{
		HikariDataSource ds = this.dbSources.get(connectionTitle);
		if(ds == null){
			throw new IllegalArgumentException("No database pool found for identifier " + connectionTitle);
		}
		databaseRequest(ds.getConnection(), request, handler, args);
	}
	
	/**
	 * Executes SQL request for provided database connection and returns the ResultSet object generated by the query.
	 * @param connection Connection, which would be used
	 * @param request SQL request
	 * @param args  Arguments of SQL request 
	 * @return ResultSet object generated by the query, can be null
	 * @throws IllegalArgumentException if connection is null
	 */
	public void databaseRequest(Connection connection, String request, DatabaseConnectionHandler handler, Object ... args){
		try{
			if(connection != null){
				PreparedStatement prepState = connection.prepareStatement(request);
				for(int index = 0; index < args.length; index++){
					prepState.setString(index + 1, String.valueOf(args[index]));
				}
				ResultSet result = prepState.executeQuery();
				handler.handle(result);
				connection.close();
			} else {
				throw new IllegalArgumentException("Provided database connection is null");
			}
		} catch(SQLException exception){
			SkyMineLogger.error("Error while requesting database: " + exception.getSQLState());
			exception.printStackTrace();
		}
	}
	
	/**
	 * Executes SQL manipulate for provided database connection
	 * @param connectionTitle String identifier of connection which would be used
	 * @param request SQL request
	 * @param args Arguments of SQL request 
	 * @return boolean true if request was successful and false if error happened
	 * @throws SQLException 
	 * @throws IllegalArgumentException will be thrown if no connection for such <b>connectionTitle</b> has been initialized
	 */
	public boolean databaseManipulate(String connectionTitle, String request, Object ... args) throws SQLException{
		HikariDataSource ds = this.dbSources.get(connectionTitle);
		if(ds == null){
			throw new IllegalArgumentException("No database pool found for identifier " + connectionTitle);
		}
		return databaseManipulate(ds.getConnection(), request, args);
	}
	
	/**
	 * Executes SQL request for provided database connection
	 * @param connection Connection, which would be used
	 * @param request SQL request
	 * @param args  Arguments of SQL request 
	 * @return ResultSet object generated by the query, can be null
	 * @throws IllegalArgumentException if connection is null
	 */
	public boolean databaseManipulate(Connection connection, String request, Object ... args){
		try{
			if(connection != null){
				PreparedStatement prepState = connection.prepareStatement(request);
				for(int index = 0; index < args.length; index++){
					prepState.setString(index + 1, String.valueOf(args[index]));
				}
				prepState.execute();
				connection.close();
				return true;
			} else {
				throw new IllegalArgumentException("Provided database connection is null");
			}
		} catch(SQLException exception){
			SkyMineLogger.error("Error while requesting database: " + exception.getSQLState());
			exception.printStackTrace();
		}
		return false;
	}
	
	@Override
	protected void finalize() throws Throwable {
		try{
			this.dbSources.forEach((k, v) -> {try {
				v.close();
			} catch (Exception e) {e.printStackTrace();}});
		} finally {
			super.finalize();
		}
	}
}
